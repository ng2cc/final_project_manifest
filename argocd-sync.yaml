# Argo CD는 GitOps 패턴을 따르는 도구로, Git 리포지토리에 저장된 애플리케이션 소스 코드와 클러스터 상태를 동기화

# apiVersion 및 kind는 애플리케이션을 정의하는 리소스
apiVersion: argoproj.io/v1alpha1 # Argo 프로젝트에서 정의한 커스텀 리소스 : argoproj.io / v1alpha1은 초기 개발 단계의 버전을 나타냄
kind: Application # ArgoCD는 Application 리소스를 사용하여 GitOps 방식으로 애플리케이션을 배포하고 관리합니다.

# application 필드에 대한 부가정보를 포함하는 객체
# Argo CD 대시보드나 CLI를 통해 해당 애플리케이션의 상태와 구성을 확인
metadata:
  name: todo-app-argo
  namespace: argocd

# spec은 애플리케이션의 구성을 정의
# project는 애플리케이션이 속하는 argoCD 프로젝트를 지정, 처음 설정한 기본 프로젝트를 default로 설정
spec:
  project: default

  # source : 애플리케이션의 소스 코드가 위치한 Git 리포리토리 정보를 정의
  source:
    repoURL: https://github.com/swordbillz/kube_manifest-4thWeekOfCloudOps.git # GIT에 있는 애플리케이션 소스를 가진 레포지토리의 정보를 가져온다
    targetRevision: HEAD # targetRevision 이란 애플리케이션 소스 코드의 특정 버전이나 브랜치를 지정합니다. 
    # HEAD는 Git 리포지토리의 최신 커밋을 가리키며, 따라서 가장 최근의 소스 코드를 사용하도록 설정
    path: menifest # 해당 깃 리포지토리 중 menifest 디렉토리에서 애플리케이션의 매니페스트 파일을 찾아 배포

  # destination : 애플리케이션을 배포할 대상을 설정
  # 클러스터가 하나 밖에 없기 때문에 클러스터 서비스 내부에서 사용하는 규약인 https://kubernetes.default.svc (클러스터의 기본 서비스 DNS의 이름)을 사용하게 됩니다.
  # 별도의 클러스터를 지정하려면 server 부분에 해당 클러스터의 api 주소를 입력하고 namespace를 지정해야 합니다.
  destination:
    server: https://kubernetes.default.svc
    namespace: myapp # 네임스페이스는 myapp

  # syncPolicy : 애플리케이션의 동기화 정책 설정
  syncPolicy:
    syncOptions: # syncOptions는 동기화 옵션을 설정하는 배열
  # 일반적으로는 네임스페이스가 지정되어 있지만 ArgoCD가 네임스페이스를 찾지 못할 경우 - CreateNamespace=true 설정 시 자동으로 네임스페이스를 생성하여
  # 애플리케이션을 배포하므로 네임스페이스 관리를 자동화할 수 있습니다.
      - CreateNamespace=true

    # automated : 자동화된 동기화 정책을 설정
    # selfHeal : Argo CD는 배포된 애플리케이션의 상태를 주기적으로 모니터링하고, 상태가 변경된 경우에 자동으로 해당 상태를 복구
    # prune : Argo CD는 Git 리포지토리의 변경 사항에 따라 필요하지 않은 리소스를 클러스터에서 자동으로 제거합니다.
    # 예를 들어, Git 리포지토리에서 특정 리소스를 삭제했을 때, 해당 리소스를 클러스터에서도 삭제함으로써 리소스의 일치성을 유지
    automated:
      selfHeal: true
      prune: true
